/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Formularios;
import BlockChain.BlockChain;
import BlockChain.Cifrado;
import BlockChain.NodeData;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.net.InetAddress;
import java.net.InetSocketAddress;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.ArrayList;

/**
 *
 * @author Jimmy
 */
public class frmServidor extends javax.swing.JFrame implements Runnable {
    private Thread tListener;
    private NodeData nodoActual;
    private ArrayList<NodeData> listadoServidores;
    private ArrayList<NodeData> listadoClientes;
    private ArrayList<frmDoctor> frmDoctores;
    private ArrayList<frmRecepcionista> frmRecepcionistas;
    private ServerSocket serverSocket;
    private BlockChain blockChain;
    private Cifrado cifrado;
    
    /**
     * Creates new form frmServidor
     */
    public frmServidor() {
        initComponents();
    }
    
    public frmServidor(NodeData nodeData){
        initComponents();
        
        this.listadoServidores = new ArrayList<>();                
        this.listadoClientes = new ArrayList<>();
        this.frmDoctores = new ArrayList<>();
        this.frmRecepcionistas = new ArrayList<>();
        
        this.cifrado = new Cifrado("¡¡Soltala Erika soltala!!");
        this.nodoActual = nodeData;
        
        this.lblNombreNodo.setText(this.nodoActual.getNombreDelNodo());
        this.lblDirecciónIP.setText(this.nodoActual.getDireccionIP());
        this.lblNumeroSocket.setText(Integer.toString(this.nodoActual.getNumeroDeSocket()));
        
        //this.iniciarServidor();        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblNombreNodo = new javax.swing.JLabel();
        lblDirecciónIP = new javax.swing.JLabel();
        lblNumeroSocket = new javax.swing.JLabel();
        lblNodosExistentes = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(650, 450));

        lblNombreNodo.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        lblNombreNodo.setText(".");

        lblDirecciónIP.setText("Dirección IP:");

        lblNumeroSocket.setText("Número de Socket:");

        lblNodosExistentes.setText("Nodos existentes:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblDirecciónIP)
                            .addComponent(lblNumeroSocket))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblNombreNodo)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 257, Short.MAX_VALUE)
                        .addComponent(lblNodosExistentes)
                        .addGap(289, 289, 289))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblNombreNodo)
                    .addComponent(lblNodosExistentes))
                .addGap(18, 18, 18)
                .addComponent(lblDirecciónIP)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lblNumeroSocket)
                .addContainerGap(350, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(frmServidor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(frmServidor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(frmServidor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(frmServidor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new frmServidor().setVisible(true);
            }
        });
    }

    @Override
    public void run() {
        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }
    
    public void registrarRed(ArrayList<NodeData> nodos){
        String cadena = "";
        
        for(int i = 0; i < nodos.size(); i++){
            if(!nodos.get(i).getNombreDelNodo().equals(this.nodoActual.getNombreDelNodo())){
                this.listadoServidores.add(nodos.get(i));
                cadena += nodos.get(i).getNombreDelNodo() + ",";
            }
        }
        
        if(cadena.length()<1){
            cadena = "Ninguno";
        }
        
        this.lblNodosExistentes.setText(cadena);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel lblDirecciónIP;
    private javax.swing.JLabel lblNodosExistentes;
    private javax.swing.JLabel lblNombreNodo;
    private javax.swing.JLabel lblNumeroSocket;
    // End of variables declaration//GEN-END:variables
}
